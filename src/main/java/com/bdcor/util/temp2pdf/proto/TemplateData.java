/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bdcor.util.temp2pdf.proto;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemplateData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9092709334950325724L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemplateData\",\"namespace\":\"com.bdcor.util.temp2pdf.proto\",\"fields\":[{\"name\":\"template\",\"type\":\"bytes\"},{\"name\":\"params2\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer template;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> params2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemplateData() {}

  /**
   * All-args constructor.
   * @param template The new value for template
   * @param params2 The new value for params2
   */
  public TemplateData(java.nio.ByteBuffer template, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> params2) {
    this.template = template;
    this.params2 = params2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return template;
    case 1: return params2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: template = (java.nio.ByteBuffer)value$; break;
    case 1: params2 = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'template' field.
   * @return The value of the 'template' field.
   */
  public java.nio.ByteBuffer getTemplate() {
    return template;
  }

  /**
   * Sets the value of the 'template' field.
   * @param value the value to set.
   */
  public void setTemplate(java.nio.ByteBuffer value) {
    this.template = value;
  }

  /**
   * Gets the value of the 'params2' field.
   * @return The value of the 'params2' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParams2() {
    return params2;
  }

  /**
   * Sets the value of the 'params2' field.
   * @param value the value to set.
   */
  public void setParams2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.params2 = value;
  }

  /**
   * Creates a new TemplateData RecordBuilder.
   * @return A new TemplateData RecordBuilder
   */
  public static com.bdcor.util.temp2pdf.proto.TemplateData.Builder newBuilder() {
    return new com.bdcor.util.temp2pdf.proto.TemplateData.Builder();
  }

  /**
   * Creates a new TemplateData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemplateData RecordBuilder
   */
  public static com.bdcor.util.temp2pdf.proto.TemplateData.Builder newBuilder(com.bdcor.util.temp2pdf.proto.TemplateData.Builder other) {
    return new com.bdcor.util.temp2pdf.proto.TemplateData.Builder(other);
  }

  /**
   * Creates a new TemplateData RecordBuilder by copying an existing TemplateData instance.
   * @param other The existing instance to copy.
   * @return A new TemplateData RecordBuilder
   */
  public static com.bdcor.util.temp2pdf.proto.TemplateData.Builder newBuilder(com.bdcor.util.temp2pdf.proto.TemplateData other) {
    return new com.bdcor.util.temp2pdf.proto.TemplateData.Builder(other);
  }

  /**
   * RecordBuilder for TemplateData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemplateData>
    implements org.apache.avro.data.RecordBuilder<TemplateData> {

    private java.nio.ByteBuffer template;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> params2;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bdcor.util.temp2pdf.proto.TemplateData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.template)) {
        this.template = data().deepCopy(fields()[0].schema(), other.template);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.params2)) {
        this.params2 = data().deepCopy(fields()[1].schema(), other.params2);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TemplateData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bdcor.util.temp2pdf.proto.TemplateData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.template)) {
        this.template = data().deepCopy(fields()[0].schema(), other.template);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.params2)) {
        this.params2 = data().deepCopy(fields()[1].schema(), other.params2);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'template' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTemplate() {
      return template;
    }

    /**
      * Sets the value of the 'template' field.
      * @param value The value of 'template'.
      * @return This builder.
      */
    public com.bdcor.util.temp2pdf.proto.TemplateData.Builder setTemplate(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.template = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'template' field has been set.
      * @return True if the 'template' field has been set, false otherwise.
      */
    public boolean hasTemplate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'template' field.
      * @return This builder.
      */
    public com.bdcor.util.temp2pdf.proto.TemplateData.Builder clearTemplate() {
      template = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'params2' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParams2() {
      return params2;
    }

    /**
      * Sets the value of the 'params2' field.
      * @param value The value of 'params2'.
      * @return This builder.
      */
    public com.bdcor.util.temp2pdf.proto.TemplateData.Builder setParams2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.params2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'params2' field has been set.
      * @return True if the 'params2' field has been set, false otherwise.
      */
    public boolean hasParams2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'params2' field.
      * @return This builder.
      */
    public com.bdcor.util.temp2pdf.proto.TemplateData.Builder clearParams2() {
      params2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TemplateData build() {
      try {
        TemplateData record = new TemplateData();
        record.template = fieldSetFlags()[0] ? this.template : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.params2 = fieldSetFlags()[1] ? this.params2 : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
